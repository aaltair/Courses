// <auto-generated />
using System;
using Courses.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Courses.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190717110911_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Courses.Entities.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorName")
                        .HasMaxLength(100);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("UpdateOn");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");

                    b.HasData(
                        new { AuthorId = 1, AuthorName = "Alaa Altair", CreatedOn = new DateTime(2019, 7, 17, 14, 9, 11, 211, DateTimeKind.Local), IsDelete = false },
                        new { AuthorId = 2, AuthorName = "Ali Altair", CreatedOn = new DateTime(2019, 7, 17, 14, 9, 11, 220, DateTimeKind.Local), IsDelete = false },
                        new { AuthorId = 3, AuthorName = "Ahmad Altair", CreatedOn = new DateTime(2019, 7, 17, 14, 9, 11, 220, DateTimeKind.Local), IsDelete = false }
                    );
                });

            modelBuilder.Entity("Courses.Entities.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId");

                    b.Property<string>("CourseCategory")
                        .HasMaxLength(50);

                    b.Property<string>("CourseName")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateOn");

                    b.HasKey("CourseId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Courses");

                    b.HasData(
                        new { CourseId = 1, AuthorId = 1, CourseCategory = "FullStack", CourseName = ".Net Core With React", CreatedOn = new DateTime(2019, 7, 17, 14, 9, 11, 220, DateTimeKind.Local), IsDelete = false },
                        new { CourseId = 2, AuthorId = 2, CourseCategory = "FrontEnd", CourseName = "React With Redux", CreatedOn = new DateTime(2019, 7, 17, 14, 9, 11, 220, DateTimeKind.Local), IsDelete = false },
                        new { CourseId = 3, AuthorId = 3, CourseCategory = "BackEnd", CourseName = ".Net Core WebApi", CreatedOn = new DateTime(2019, 7, 17, 14, 9, 11, 220, DateTimeKind.Local), IsDelete = false }
                    );
                });

            modelBuilder.Entity("Courses.Entities.Course", b =>
                {
                    b.HasOne("Courses.Entities.Author", "Author")
                        .WithMany("Courses")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
